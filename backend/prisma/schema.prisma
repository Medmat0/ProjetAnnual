// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Table pour user 
model User {
  id                        Int              @id @default(autoincrement())
  name                      String
  email                     String           @unique
  password                  String
  role                      Role             @default(USER)
  isActive                  Boolean          @default(true)
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  passwordResetToken        String?
  passwordResetTokenVerfied Boolean?
  passwordResetTokenExpire  String?
  passwordChangedAt         String?
  emailVerificationToken    String?          @unique
  emailVerified             Boolean          @default(false)
  postComments              PostComment[]
  programPostComments       ProgramPostComment[]
  postLikes                 PostLike[]
  programPostLikes          ProgramPostLike[]
  posts                     Post[]
  programPosts              ProgramPost[]
  profile                   Profile?
  followers                 FollowRelation[] @relation(name: "followed")
  following                 FollowRelation[] @relation(name: "follower")
  followRequestsSent        FollowRequest[]  @relation(name: "requester")
  followRequestsReceived    FollowRequest[]  @relation(name: "requestee")
  programCollections        ProgramPost[]    @relation(name: "collection")
  notifications             Notification[]  
  friends1                  Friendship[]     @relation(name: "friendshipUser1")
  friends2                  Friendship[]     @relation(name: "friendshipUser2")
  replies                   Reply[]          @relation(name: "UserReplies")
  pipelines                 Pipeline[]       @relation("UserPipelines")
}

model Pipeline {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  nodes       Json
  edges       Json
  userId      Int
  user        User     @relation(name: "UserPipelines", fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Friendship {
  id          Int  @id @default(autoincrement())
  userId1     Int
  userId2     Int
  user1       User @relation(name: "friendshipUser1", fields: [userId1], references: [id])
  user2       User @relation(name: "friendshipUser2", fields: [userId2], references: [id])

  @@unique([userId1, userId2])
}

model Notification {
  id         Int      @id @default(autoincrement())
  type       String
  message    String
  userId     Int
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
}

// Table pour un post normal
model Post {
  id            Int       @id @unique @default(autoincrement())
  userId        Int
  title         String
  content       String?
  image         String[]
  likesCount    Int       @default(0)
  commentsCount Int       @default(0)
  postedAt      DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  privacy       Privacy   @default(FOLLOWERS)
  comments      PostComment[]
  likes         PostLike[]
  author        User      @relation(fields: [userId], references: [id])
}

// Table pour les program post 
model ProgramPost {
  id            Int       @id @unique @default(autoincrement())
  userId        Int
  title         String
  description   String
  code          String
  inputType     String
  createdAt     DateTime  @default(now())
  language      String   
  likesCount    Int       @default(0) 
  commentsCount Int       @default(0)
  updatedAt     DateTime  @updatedAt
  privacy       Privacy   @default(FOLLOWERS)
  comments      ProgramPostComment[]
  likes         ProgramPostLike[]
  author        User      @relation(fields: [userId], references: [id])
  collection    User[]    @relation(name: "collection")
  versions      ProgramPostVersion[] @relation("ProgramPostVersions")
  tags          String[]  @default([])  
}

model ProgramPostVersion {
  id            Int         @id @default(autoincrement())
  programPostId Int
  content       String
  versionNumber Int
  createdAt     DateTime    @default(now())
  programPost   ProgramPost @relation(name : "ProgramPostVersions",fields: [programPostId], references: [id])
}

model FollowRelation {
  id         Int  @id @default(autoincrement())
  followedId Int
  followerId Int
  followed   User @relation(name: "followed", fields: [followedId], references: [id])
  follower   User @relation(name: "follower", fields: [followerId], references: [id])
}

model Profile {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  bio     String  @default("Not bio yet.")
  image   String?
  city    String
  website String?
  user    User    @relation(fields: [userId], references: [id])
}

// Model for likes on Post
model PostLike {
  id      Int  @id @default(autoincrement())
  postId  Int
  userId  Int
  post    Post @relation(fields: [postId], references: [id])
  user    User @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

// Model for likes on ProgramPost
model ProgramPostLike {
  id            Int  @id @default(autoincrement())
  programPostId Int
  userId        Int
  programPost   ProgramPost @relation(fields: [programPostId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([programPostId, userId])
}

// Model for comments on Post
model PostComment {
  id      Int    @id @default(autoincrement())
  postId  Int
  userId  Int
  content String
  post    Post   @relation(fields: [postId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  replies Reply[] @relation(name: "PostCommentReplies")
}

// Model for comments on ProgramPost
model ProgramPostComment {
  id            Int    @id @default(autoincrement())
  programPostId Int
  userId        Int
  content       String
  programPost   ProgramPost @relation(fields: [programPostId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  replies       Reply[]     @relation(name: "ProgramPostCommentReplies")
}

model Reply {
  id                   Int                  @id @default(autoincrement())
  postCommentId        Int?
  programPostCommentId Int?
  userId               Int
  content              String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  postComment          PostComment?         @relation(name: "PostCommentReplies", fields: [postCommentId], references: [id])
  programPostComment   ProgramPostComment?  @relation(name: "ProgramPostCommentReplies", fields: [programPostCommentId], references: [id])
  user                 User                 @relation(name: "UserReplies", fields: [userId], references: [id])
}

model FollowRequest {
  id          Int      @id @default(autoincrement())
  requesterId Int
  requesteeId Int
  status      RequestStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requester  User @relation(name: "requester", fields: [requesterId], references: [id])
  requestee  User @relation(name: "requestee", fields: [requesteeId], references: [id])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  USER
  ADMIN
}

enum Privacy {
  PUBLIC
  PRIVATE
  FOLLOWERS
}
